package com.wangert.vhw.controller;

import com.wangert.vhw.service.VulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * 文件下载控制层
 *
 * @Author：Wangert
 */

@Controller
public class DownloadController {

    @Autowired
    VulnerabilityService vulnerabilityService ;

    @ResponseBody
    @RequestMapping(value = {"/downloadVulnerability", "/downloadPatch"})
    public String downloadVulnerability(String fileName, HttpServletResponse response) throws UnsupportedEncodingException {

        vulnerabilityService.downloadVulnerabilityByIpfsHash(fileName);

        String path = "src/main/resources/files/ipfsDownload/" + fileName + ".zip";

        System.out.println(path);

        File file = new File(path);
        if (!file.exists()) {
            System.out.println("文件不存在");
            return "error";
        }
        Date currentTime = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
        String dataTime = dateFormat.format(currentTime);

        //文件重命名
        String newFileName = dataTime + fileName + ".zip";
//
        // 配置文件下载
        response.setHeader("content-type", "application/octet-stream");
        response.setContentType("application/octet-stream");
        // 需要指定文件的长度，不然只能下载不全
        response.addHeader("Content-Length", "" + file.length());
        // 下载文件能正常显示中文
        response.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(newFileName, "UTF-8"));

        // 实现文件下载
        byte[] buffer = new byte[2048];
        FileInputStream fis = null;
        BufferedInputStream bis = null;
        try {
            fis = new FileInputStream(file);
            bis = new BufferedInputStream(fis);
            OutputStream os = response.getOutputStream();
            int i = bis.read(buffer);
            while (i != -1) {
                os.write(buffer, 0, i);
                i = bis.read(buffer);
            }
            System.out.println("下载成功!");
            return "success";

        } catch (Exception e) {
            System.out.println("下载失败!");
            return "failed";

        } finally {
            if (bis != null) {
                try {
                    bis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

package com.wangert.vhw.entities.Web3j;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.0.
 */
public class UserStorage extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b506126fc806100206000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630554bf96146100eb578063146c0d1a146101bf578063379429e31461025057806342f6fad31461034657806354cdfd411461043c5780635cfbc0001461051057806395c5fed4146105d95780639b8bfeb6146106e6578063a1787cf31461077b578063a2ab23fd14610810578063a6b6abf614610891578063aa0ad39a14610958578063b6fd926514610a1f578063bcb83baa14610ae8578063bfdfc27414610b94578063fc6810fd14610c25575b600080fd5b3480156100f757600080fd5b506101a5600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050610d32565b604051808215151515815260200191505060405180910390f35b3480156101cb57600080fd5b50610226600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f37565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34801561025c57600080fd5b506102cb600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803567ffffffffffffffff169060200190929190505050610fc2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030b5780820151818401526020810190506102f0565b50505050905090810190601f1680156103385780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035257600080fd5b506103c1600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803567ffffffffffffffff1690602001909291905050506110f4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104015780820151818401526020810190506103e6565b50505050905090810190601f16801561042e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561044857600080fd5b506104f6600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050611226565b604051808215151515815260200191505060405180910390f35b34801561051c57600080fd5b506105bd600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061142b565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105e557600080fd5b506106cc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611519565b604051808215151515815260200191505060405180910390f35b3480156106f257600080fd5b50610761600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803567ffffffffffffffff1690602001909291905050506119a2565b604051808215151515815260200191505060405180910390f35b34801561078757600080fd5b506107f6600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803567ffffffffffffffff169060200190929190505050611a74565b604051808215151515815260200191505060405180910390f35b34801561081c57600080fd5b50610877600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611bf4565b604051808215151515815260200191505060405180910390f35b34801561089d57600080fd5b5061093e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611c89565b604051808215151515815260200191505060405180910390f35b34801561096457600080fd5b50610a05600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611e0b565b604051808215151515815260200191505060405180910390f35b348015610a2b57600080fd5b50610acc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611f8d565b604051808260ff1660ff16815260200191505060405180910390f35b348015610af457600080fd5b50610b4f600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061207b565b604051808367ffffffffffffffff1667ffffffffffffffff1681526020018267ffffffffffffffff1667ffffffffffffffff1681526020019250505060405180910390f35b348015610ba057600080fd5b50610bfb600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061218d565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b348015610c3157600080fd5b50610d18600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612218565b604051808215151515815260200191505060405180910390f35b6000610d3d84611bf4565b15610f2b57600080856040518082805190602001908083835b602083101515610d7b5780518252602082019150602081019050602083039250610d56565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600901846040518082805190602001908083835b602083101515610de75780518252602082019150602081019050602083039250610dc2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1660ff161415610f2a57816000856040518082805190602001908083835b602083101515610e6a5780518252602082019150602081019050602083039250610e45565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600901846040518082805190602001908083835b602083101515610ed65780518252602082019150602081019050602083039250610eb1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908360ff16021790555060019050610f30565b5b600090505b9392505050565b600080826040518082805190602001908083835b602083101515610f705780518252602082019150602081019050602083039250610f4b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050160009054906101000a900467ffffffffffffffff169050919050565b60606000836040518082805190602001908083835b602083101515610ffc5780518252602082019150602081019050602083039250610fd7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206006018267ffffffffffffffff1681548110151561104957fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110e75780601f106110bc576101008083540402835291602001916110e7565b820191906000526020600020905b8154815290600101906020018083116110ca57829003601f168201915b5050505050905092915050565b60606000836040518082805190602001908083835b60208310151561112e5780518252602082019150602081019050602083039250611109565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004018267ffffffffffffffff1681548110151561117b57fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112195780601f106111ee57610100808354040283529160200191611219565b820191906000526020600020905b8154815290600101906020018083116111fc57829003601f168201915b5050505050905092915050565b600061123184611bf4565b1561141f57600080856040518082805190602001908083835b60208310151561126f578051825260208201915060208101905060208303925061124a565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600801846040518082805190602001908083835b6020831015156112db57805182526020820191506020810190506020830392506112b6565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1660ff16141561141e57816000856040518082805190602001908083835b60208310151561135e5780518252602082019150602081019050602083039250611339565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600801846040518082805190602001908083835b6020831015156113ca57805182526020820191506020810190506020830392506113a5565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff021916908360ff16021790555060019050611424565b5b600090505b9392505050565b600080836040518082805190602001908083835b602083101515611464578051825260208201915060208101905060208303925061143f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600901826040518082805190602001908083835b6020831015156114d057805182526020820191506020810190506020830392506114ab565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16905092915050565b600061152484611bf4565b15611532576000905061199b565b836000856040518082805190602001908083835b60208310151561156b5780518252602082019150602081019050602083039250611546565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000190805190602001906115b492919061262b565b50826000856040518082805190602001908083835b6020831015156115ee57805182526020820191506020810190506020830392506115c9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101908051906020019061163792919061262b565b50816000856040518082805190602001908083835b602083101515611671578051825260208201915060208101905060208303925061164c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020190805190602001906116ba92919061262b565b50600080856040518082805190602001908083835b6020831015156116f457805182526020820191506020810190506020830392506116cf565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600080856040518082805190602001908083835b6020831015156117895780518252602082019150602081019050602083039250611764565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060016000856040518082805190602001908083835b60208310151561181f57805182526020820191506020810190506020830392506117fa565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600a0160006101000a81548160ff021916908315150217905550600080856040518082805190602001908083835b6020831015156118a55780518252602082019150602081019050602083039250611880565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600080856040518082805190602001908083835b60208310151561193a5780518252602082019150602081019050602083039250611915565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b9392505050565b60006119ad83611bf4565b15611a6957816000846040518082805190602001908083835b6020831015156119eb57805182526020820191506020810190506020830392506119c6565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160088282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019050611a6e565b600090505b92915050565b6000611a7f83611bf4565b15611be957816000846040518082805190602001908083835b602083101515611abd5780518252602082019150602081019050602083039250611a98565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816000846040518082805190602001908083835b602083101515611b6b5780518252602082019150602081019050602083039250611b46565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160088282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019050611bee565b600090505b92915050565b600080826040518082805190602001908083835b602083101515611c2d5780518252602082019150602081019050602083039250611c08565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600a0160009054906101000a900460ff1615611c7f5760019050611c84565b600090505b919050565b6000611c9483611bf4565b15611e00576000836040518082805190602001908083835b602083101515611cd15780518252602082019150602081019050602083039250611cac565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600601829080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190611d4292919061262b565b50506000836040518082805190602001908083835b602083101515611d7c5780518252602082019150602081019050602083039250611d57565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600701600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060019050611e05565b600090505b92915050565b6000611e1683611bf4565b15611f82576000836040518082805190602001908083835b602083101515611e535780518252602082019150602081019050602083039250611e2e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600401829080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190611ec492919061262b565b50506000836040518082805190602001908083835b602083101515611efe5780518252602082019150602081019050602083039250611ed9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060019050611f87565b600090505b92915050565b600080836040518082805190602001908083835b602083101515611fc65780518252602082019150602081019050602083039250611fa1565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600801826040518082805190602001908083835b602083101515612032578051825260208201915060208101905060208303925061200d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16905092915050565b6000806000836040518082805190602001908083835b6020831015156120b65780518252602082019150602081019050602083039250612091565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160009054906101000a900467ffffffffffffffff166000846040518082805190602001908083835b6020831015156121395780518252602082019150602081019050602083039250612114565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160089054906101000a900467ffffffffffffffff1691509150915091565b600080826040518082805190602001908083835b6020831015156121c657805182526020820191506020810190506020830392506121a1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160009054906101000a900467ffffffffffffffff169050919050565b6000806000806000806000896040518082805190602001908083835b6020831015156122595780518252602082019150602081019050602083039250612234565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209550886040518082805190602001908083835b6020831015156122be5780518252602082019150602081019050602083039250612299565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209450876040518082805190602001908083835b60208310151561232357805182526020820191506020810190506020830392506122fe565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020935060008a6040518082805190602001908083835b60208310151561238a5780518252602082019150602081019050602083039250612365565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001604051808280546001816001161561010002031660029004801561241b5780601f106123f957610100808354040283529182019161241b565b820191906000526020600020905b815481529060010190602001808311612407575b50509150506040518091039020925060008a6040518082805190602001908083835b602083101515612462578051825260208201915060208101905060208303925061243d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160405180828054600181600116156101000203166002900480156124f35780601f106124d15761010080835404028352918201916124f3565b820191906000526020600020905b8154815290600101906020018083116124df575b50509150506040518091039020915060008a6040518082805190602001908083835b60208310151561253a5780518252602082019150602081019050602083039250612515565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020160405180828054600181600116156101000203166002900480156125cb5780601f106125a95761010080835404028352918201916125cb565b820191906000526020600020905b8154815290600101906020018083116125b7575b505091505060405180910390209050826000191686600019161480156125f8575081600019168560001916145b801561260b575080600019168460001916145b15612619576001965061261e565b600096505b5050505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061266c57805160ff191683800117855561269a565b8280016001018555821561269a579182015b8281111561269957825182559160200191906001019061267e565b5b5090506126a791906126ab565b5090565b6126cd91905b808211156126c95760008160009055506001016126b1565b5090565b905600a165627a7a723058200c779080b34edaec142423e02e15208836bffafe8c7767f5bf7cce675c49b5240029";

    public static final String FUNC_ADDASSESSPATCHSCORE = "addAssessPatchScore";

    public static final String FUNC_GETNUMBEROFRELEASEDVULNERABILITY = "getNumberOfReleasedVulnerability";

    public static final String FUNC_GETPATCHIPFSHASHBYINDEX = "getPatchIpfsHashByIndex";

    public static final String FUNC_GETVULNERABILITYIPFSHASHBYINDEX = "getVulnerabilityIpfsHashByIndex";

    public static final String FUNC_ADDASSESSVULNERABILITIESSCORE = "addAssessVulnerabilitiesScore";

    public static final String FUNC_GETPATCHASSESSSCOREBYUSER = "getPatchAssessScoreByUser";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_USERESIDUALCONTRIBUTION = "useResidualContribution";

    public static final String FUNC_ADDTOTALANDRESIDUALCONTRIBUTION = "addTotalAndResidualContribution";

    public static final String FUNC_USEREXISTED = "userExisted";

    public static final String FUNC_ADDRELEASEPATCH = "addReleasePatch";

    public static final String FUNC_ADDRELEASEVULNERABILITY = "addReleaseVulnerability";

    public static final String FUNC_GETVULNERABILITYASSESSSCOREBYUSER = "getVulnerabilityAssessScoreByUser";

    public static final String FUNC_GETCONTRIBUTIONSTATUSWITHUSER = "getContributionStatusWithUser";

    public static final String FUNC_GETNUMBEROFRELEASEDPATCH = "getNumberOfReleasedPatch";

    public static final String FUNC_VERIFYUSER = "verifyUser";

    @Deprecated
    protected UserStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserStorage(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> addAssessPatchScore(Utf8String username, Utf8String assessor, Uint8 score) {
        final Function function = new Function(
                FUNC_ADDASSESSPATCHSCORE, 
                Arrays.<Type>asList(username, assessor, score), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint64> getNumberOfReleasedVulnerability(Utf8String username) {
        final Function function = new Function(FUNC_GETNUMBEROFRELEASEDVULNERABILITY, 
                Arrays.<Type>asList(username), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getPatchIpfsHashByIndex(Utf8String username, Uint64 index) {
        final Function function = new Function(FUNC_GETPATCHIPFSHASHBYINDEX, 
                Arrays.<Type>asList(username, index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getVulnerabilityIpfsHashByIndex(Utf8String username, Uint64 index) {
        final Function function = new Function(FUNC_GETVULNERABILITYIPFSHASHBYINDEX, 
                Arrays.<Type>asList(username, index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addAssessVulnerabilitiesScore(Utf8String username, Utf8String assessor, Uint8 score) {
        final Function function = new Function(
                FUNC_ADDASSESSVULNERABILITIESSCORE, 
                Arrays.<Type>asList(username, assessor, score), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint8> getPatchAssessScoreByUser(Utf8String username, Utf8String assessor) {
        final Function function = new Function(FUNC_GETPATCHASSESSSCOREBYUSER, 
                Arrays.<Type>asList(username, assessor), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addUser(Utf8String username, Utf8String vhwAddress, Utf8String encryptedPassword) {
        final Function function = new Function(
                FUNC_ADDUSER, 
                Arrays.<Type>asList(username, vhwAddress, encryptedPassword), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> useResidualContribution(Utf8String username, Uint64 useContribution) {
        final Function function = new Function(
                FUNC_USERESIDUALCONTRIBUTION, 
                Arrays.<Type>asList(username, useContribution), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addTotalAndResidualContribution(Utf8String username, Uint64 contribution) {
        final Function function = new Function(
                FUNC_ADDTOTALANDRESIDUALCONTRIBUTION, 
                Arrays.<Type>asList(username, contribution), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> userExisted(Utf8String username) {
        final Function function = new Function(FUNC_USEREXISTED, 
                Arrays.<Type>asList(username), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addReleasePatch(Utf8String username, Utf8String patchIpfsHash) {
        final Function function = new Function(
                FUNC_ADDRELEASEPATCH, 
                Arrays.<Type>asList(username, patchIpfsHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addReleaseVulnerability(Utf8String username, Utf8String vulnerabilityIpfsHash) {
        final Function function = new Function(
                FUNC_ADDRELEASEVULNERABILITY, 
                Arrays.<Type>asList(username, vulnerabilityIpfsHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint8> getVulnerabilityAssessScoreByUser(Utf8String username, Utf8String assessor) {
        final Function function = new Function(FUNC_GETVULNERABILITYASSESSSCOREBYUSER, 
                Arrays.<Type>asList(username, assessor), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple2<Uint64, Uint64>> getContributionStatusWithUser(Utf8String username) {
        final Function function = new Function(FUNC_GETCONTRIBUTIONSTATUSWITHUSER, 
                Arrays.<Type>asList(username), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple2<Uint64, Uint64>>(
                new Callable<Tuple2<Uint64, Uint64>>() {
                    @Override
                    public Tuple2<Uint64, Uint64> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Uint64, Uint64>(
                                (Uint64) results.get(0), 
                                (Uint64) results.get(1));
                    }
                });
    }

    public RemoteCall<Uint64> getNumberOfReleasedPatch(Utf8String username) {
        final Function function = new Function(FUNC_GETNUMBEROFRELEASEDPATCH, 
                Arrays.<Type>asList(username), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> verifyUser(Utf8String username, Utf8String vhwAddress, Utf8String encryptedPassword) {
        final Function function = new Function(FUNC_VERIFYUSER, 
                Arrays.<Type>asList(username, vhwAddress, encryptedPassword), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static UserStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserStorage load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserStorage(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserStorage(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserStorage> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserStorage.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<UserStorage> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserStorage.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}

package com.wangert.vhw.entities.Web3j;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.0.
 */
public class VulnerabilityStorage extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50612655806100206000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631ae172ef146100e057806325323758146101a75780633681959714610289578063379429e31461030a5780633aff3d5f1461040057806345c69716146104955780635115ccd81461052657806357072865146105ed5780636a44188f1461074057806371cfc015146107d157806389421bbe146108525780639aab0b8a14610934578063b4919ad214610a16578063c51a55b814610af8578063d5f7541f14610b89575b600080fd5b3480156100ec57600080fd5b5061018d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610de5565b604051808215151515815260200191505060405180910390f35b3480156101b357600080fd5b5061020e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610f13565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561024e578082015181840152602081019050610233565b50505050905090810190601f16801561027b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029557600080fd5b506102f0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611023565b604051808215151515815260200191505060405180910390f35b34801561031657600080fd5b50610385600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803567ffffffffffffffff1690602001909291905050506110f9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103c55780820151818401526020810190506103aa565b50505050905090810190601f1680156103f25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040c57600080fd5b5061047b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803567ffffffffffffffff169060200190929190505050611277565b604051808215151515815260200191505060405180910390f35b3480156104a157600080fd5b506104fc600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611349565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34801561053257600080fd5b506105d3600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506113d4565b604051808215151515815260200191505060405180910390f35b3480156105f957600080fd5b50610726600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611556565b604051808215151515815260200191505060405180910390f35b34801561074c57600080fd5b506107a7600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611a86565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b3480156107dd57600080fd5b50610838600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611b2d565b604051808215151515815260200191505060405180910390f35b34801561085e57600080fd5b506108b9600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611bc2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108f95780820151818401526020810190506108de565b50505050905090810190601f1680156109265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561094057600080fd5b5061099b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611cd2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109db5780820151818401526020810190506109c0565b50505050905090810190601f168015610a085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a2257600080fd5b50610a7d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611de2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610abd578082015181840152602081019050610aa2565b50505050905090810190601f168015610aea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b0457600080fd5b50610b5f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611ef2565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b348015610b9557600080fd5b50610bf0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611f7d565b60405180806020018060200180602001806020018767ffffffffffffffff1667ffffffffffffffff1681526020018667ffffffffffffffff1667ffffffffffffffff16815260200185810385528b818151815260200191508051906020019080838360005b83811015610c70578082015181840152602081019050610c55565b50505050905090810190601f168015610c9d5780820380516001836020036101000a031916815260200191505b5085810384528a818151815260200191508051906020019080838360005b83811015610cd6578082015181840152602081019050610cbb565b50505050905090810190601f168015610d035780820380516001836020036101000a031916815260200191505b50858103835289818151815260200191508051906020019080838360005b83811015610d3c578082015181840152602081019050610d21565b50505050905090810190601f168015610d695780820380516001836020036101000a031916815260200191505b50858103825288818151815260200191508051906020019080838360005b83811015610da2578082015181840152602081019050610d87565b50505050905090810190601f168015610dcf5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b6000610df083611b2d565b15610f0857816000846040518082805190602001908083835b602083101515610e2e5780518252602082019150602081019050602083039250610e09565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004019080519060200190610e77929190612584565b5060016000846040518082805190602001908083835b602083101515610eb25780518252602082019150602081019050602083039250610e8d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160106101000a81548160ff02191690831515021790555060019050610f0d565b600090505b92915050565b60606000826040518082805190602001908083835b602083101515610f4d5780518252602082019150602081019050602083039250610f28565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b50505050509050919050565b600061102e82611b2d565b156110ef576000826040518082805190602001908083835b60208310151561106b5780518252602082019150602081019050602083039250611046565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050600190506110f4565b600090505b919050565b606061110483611b2d565b15611238576000836040518082805190602001908083835b602083101515611141578051825260208201915060208101905060208303925061111c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206006018267ffffffffffffffff1681548110151561118e57fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b50505050509050611271565b6040805190810160405280600581526020017f6572726f7200000000000000000000000000000000000000000000000000000081525090505b92915050565b600061128283611b2d565b1561133e57816000846040518082805190602001908083835b6020831015156112c0578051825260208201915060208101905060208303925061129b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160088282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060019050611343565b600090505b92915050565b600080826040518082805190602001908083835b602083101515611382578051825260208201915060208101905060208303925061135d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160089054906101000a900467ffffffffffffffff169050919050565b60006113df83611b2d565b1561154b576000836040518082805190602001908083835b60208310151561141c57805182526020820191506020810190506020830392506113f7565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060182908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061148d929190612584565b50506000836040518082805190602001908083835b6020831015156114c757805182526020820191506020810190506020830392506114a2565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600701600081819054906101000a900467ffffffffffffffff168092919060010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060019050611550565b600090505b92915050565b600061156185611b2d565b1561156f5760009050611a7e565b846000866040518082805190602001908083835b6020831015156115a85780518252602082019150602081019050602083039250611583565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000190805190602001906115f1929190612584565b50836000866040518082805190602001908083835b60208310151561162b5780518252602082019150602081019050602083039250611606565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190611674929190612584565b50826000866040518082805190602001908083835b6020831015156116ae5780518252602082019150602081019050602083039250611689565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020190805190602001906116f7929190612584565b50816000866040518082805190602001908083835b602083101515611731578051825260208201915060208101905060208303925061170c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600301908051906020019061177a929190612584565b506040805190810160405280600a81526020017f756e66696e6973686564000000000000000000000000000000000000000000008152506000866040518082805190602001908083835b6020831015156117e957805182526020820191506020810190506020830392506117c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004019080519060200190611832929190612584565b50600080866040518082805190602001908083835b60208310151561186c5780518252602082019150602081019050602083039250611847565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600080866040518082805190602001908083835b60208310151561190157805182526020820191506020810190506020830392506118dc565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060016000866040518082805190602001908083835b6020831015156119975780518252602082019150602081019050602083039250611972565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160116101000a81548160ff021916908315150217905550600080866040518082805190602001908083835b602083101515611a1d57805182526020820191506020810190506020830392506119f8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600190505b949350505050565b6000611a9182611b2d565b15611b20576000826040518082805190602001908083835b602083101515611ace5780518252602082019150602081019050602083039250611aa9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160009054906101000a900467ffffffffffffffff169050611b28565b6305f5e0ff90505b919050565b600080826040518082805190602001908083835b602083101515611b665780518252602082019150602081019050602083039250611b41565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160119054906101000a900460ff1615611bb85760019050611bbd565b600090505b919050565b60606000826040518082805190602001908083835b602083101515611bfc5780518252602082019150602081019050602083039250611bd7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cc65780601f10611c9b57610100808354040283529160200191611cc6565b820191906000526020600020905b815481529060010190602001808311611ca957829003601f168201915b50505050509050919050565b60606000826040518082805190602001908083835b602083101515611d0c5780518252602082019150602081019050602083039250611ce7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dd65780601f10611dab57610100808354040283529160200191611dd6565b820191906000526020600020905b815481529060010190602001808311611db957829003601f168201915b50505050509050919050565b60606000826040518082805190602001908083835b602083101515611e1c5780518252602082019150602081019050602083039250611df7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ee65780601f10611ebb57610100808354040283529160200191611ee6565b820191906000526020600020905b815481529060010190602001808311611ec957829003601f168201915b50505050509050919050565b600080826040518082805190602001908083835b602083101515611f2b5780518252602082019150602081019050602083039250611f06565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050160009054906101000a900467ffffffffffffffff169050919050565b606080606080600080600080600080600080611f988d611b2d565b156124ee5760008d6040518082805190602001908083835b602083101515611fd55780518252602082019150602081019050602083039250611fb0565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101955060008d6040518082805190602001908083835b6020831015156120455780518252602082019150602081019050602083039250612020565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600201945060008d6040518082805190602001908083835b6020831015156120b55780518252602082019150602081019050602083039250612090565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600301935060008d6040518082805190602001908083835b6020831015156121255780518252602082019150602081019050602083039250612100565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600401925060008d6040518082805190602001908083835b6020831015156121955780518252602082019150602081019050602083039250612170565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060050160009054906101000a900467ffffffffffffffff16915060008d6040518082805190602001908083835b60208310151561221a57805182526020820191506020810190506020830392506121f5565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060070160089054906101000a900467ffffffffffffffff169050858585858585858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123025780601f106122d757610100808354040283529160200191612302565b820191906000526020600020905b8154815290600101906020018083116122e557829003601f168201915b50505050509550848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561239e5780601f106123735761010080835404028352916020019161239e565b820191906000526020600020905b81548152906001019060200180831161238157829003601f168201915b50505050509450838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561243a5780601f1061240f5761010080835404028352916020019161243a565b820191906000526020600020905b81548152906001019060200180831161241d57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124d65780601f106124ab576101008083540402835291602001916124d6565b820191906000526020600020905b8154815290600101906020018083116124b957829003601f168201915b505050505092509b509b509b509b509b509b50612575565b6000806040805190810160405280600581526020017f6572726f7200000000000000000000000000000000000000000000000000000081525091906020604051908101604052806000815250919060206040519081016040528060008152509190602060405190810160405280600081525091908191508090509b509b509b509b509b509b505b50505050505091939550919395565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106125c557805160ff19168380011785556125f3565b828001600101855582156125f3579182015b828111156125f25782518255916020019190600101906125d7565b5b5090506126009190612604565b5090565b61262691905b8082111561262257600081600090555060010161260a565b5090565b905600a165627a7a72305820e312ecf848db5c644446835346cb39f1ac17e58f43950a9bfc3a81e5cbd100f20029";

    public static final String FUNC_UPDATEDONEINFORMATION = "updateDoneInformation";

    public static final String FUNC_GETVULNERABILITYDONETIME = "getVulnerabilityDoneTime";

    public static final String FUNC_INCSTAR = "incStar";

    public static final String FUNC_GETPATCHIPFSHASHBYINDEX = "getPatchIpfsHashByIndex";

    public static final String FUNC_ADDVULNERABILITYTOTALSCORE = "addVulnerabilityTotalScore";

    public static final String FUNC_GETVULNERABILITYTOTALSCORE = "getVulnerabilityTotalScore";

    public static final String FUNC_ADDPATCH = "addPatch";

    public static final String FUNC_ADDVULNERABILITY = "addVulnerability";

    public static final String FUNC_GETNUMBEROFPATCH = "getNumberOfPatch";

    public static final String FUNC_VULNERABILITYEXISTED = "vulnerabilityExisted";

    public static final String FUNC_GETVULNERABILITYUSERNAME = "getVulnerabilityUsername";

    public static final String FUNC_GETVULNERABILITYNAME = "getVulnerabilityName";

    public static final String FUNC_GETVULNERABILITYRELEASETIME = "getVulnerabilityReleaseTime";

    public static final String FUNC_GETVULNERABILITYSTAR = "getVulnerabilityStar";

    public static final String FUNC_GETBASICINFORMATION = "getBasicInformation";

    @Deprecated
    protected VulnerabilityStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VulnerabilityStorage(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VulnerabilityStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VulnerabilityStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> updateDoneInformation(Utf8String ipfsHash, Utf8String doneTime) {
        final Function function = new Function(
                FUNC_UPDATEDONEINFORMATION, 
                Arrays.<Type>asList(ipfsHash, doneTime), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> getVulnerabilityDoneTime(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETVULNERABILITYDONETIME, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> incStar(Utf8String ipfsHash) {
        final Function function = new Function(
                FUNC_INCSTAR, 
                Arrays.<Type>asList(ipfsHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> getPatchIpfsHashByIndex(Utf8String ipfsHash, Uint64 index) {
        final Function function = new Function(FUNC_GETPATCHIPFSHASHBYINDEX, 
                Arrays.<Type>asList(ipfsHash, index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addVulnerabilityTotalScore(Utf8String ipfsHash, Uint64 addScore) {
        final Function function = new Function(
                FUNC_ADDVULNERABILITYTOTALSCORE, 
                Arrays.<Type>asList(ipfsHash, addScore), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint64> getVulnerabilityTotalScore(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETVULNERABILITYTOTALSCORE, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addPatch(Utf8String ipfsHash, Utf8String patchIpfsHash) {
        final Function function = new Function(
                FUNC_ADDPATCH, 
                Arrays.<Type>asList(ipfsHash, patchIpfsHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addVulnerability(Utf8String ipfsHash, Utf8String name, Utf8String username, Utf8String releaseTime) {
        final Function function = new Function(
                FUNC_ADDVULNERABILITY, 
                Arrays.<Type>asList(ipfsHash, name, username, releaseTime), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint64> getNumberOfPatch(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETNUMBEROFPATCH, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> vulnerabilityExisted(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_VULNERABILITYEXISTED, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getVulnerabilityUsername(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETVULNERABILITYUSERNAME, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getVulnerabilityName(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETVULNERABILITYNAME, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getVulnerabilityReleaseTime(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETVULNERABILITYRELEASETIME, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint64> getVulnerabilityStar(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETVULNERABILITYSTAR, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64>> getBasicInformation(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETBASICINFORMATION, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64>>(
                new Callable<Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64>>() {
                    @Override
                    public Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64>(
                                (Utf8String) results.get(0), 
                                (Utf8String) results.get(1), 
                                (Utf8String) results.get(2), 
                                (Utf8String) results.get(3), 
                                (Uint64) results.get(4), 
                                (Uint64) results.get(5));
                    }
                });
    }

    @Deprecated
    public static VulnerabilityStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VulnerabilityStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VulnerabilityStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VulnerabilityStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VulnerabilityStorage load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VulnerabilityStorage(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VulnerabilityStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VulnerabilityStorage(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VulnerabilityStorage> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VulnerabilityStorage.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VulnerabilityStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VulnerabilityStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<VulnerabilityStorage> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VulnerabilityStorage.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<VulnerabilityStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VulnerabilityStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}

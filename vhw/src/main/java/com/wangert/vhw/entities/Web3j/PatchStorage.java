package com.wangert.vhw.entities.Web3j;


import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.1.0.
 */
public class PatchStorage extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_INCSTAR = "incStar";

    public static final String FUNC_GETPATCHTOTALSCORE = "getPatchTotalScore";

    public static final String FUNC_GETVULNERABILITYIPFSHASH = "getVulnerabilityIpfsHash";

    public static final String FUNC_GETPATCHSUBMITTIME = "getPatchSubmitTime";

    public static final String FUNC_GETPATCHRELEASETIME = "getPatchReleaseTime";

    public static final String FUNC_ADDRELEASETIME = "addReleaseTime";

    public static final String FUNC_GETPATCHUSERNAME = "getPatchUsername";

    public static final String FUNC_ADDPATCHTOTALSCORE = "addPatchTotalScore";

    public static final String FUNC_GETBASICINFORMATION = "getBasicInformation";

    public static final String FUNC_PATCHEXISTED = "patchExisted";

    public static final String FUNC_ADDPATCH = "addPatch";

    public static final String FUNC_PATCHPASSED = "patchPassed";

    public static final String FUNC_GETPATCHSTAR = "getPatchStar";

    public static final String FUNC_GETPATCHNAME = "getPatchName";

    @Deprecated
    protected PatchStorage(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PatchStorage(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PatchStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PatchStorage(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> incStar(Utf8String ipfsHash) {
        final Function function = new Function(
                FUNC_INCSTAR, 
                Arrays.<Type>asList(ipfsHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint64> getPatchTotalScore(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETPATCHTOTALSCORE, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getVulnerabilityIpfsHash(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETVULNERABILITYIPFSHASH, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getPatchSubmitTime(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETPATCHSUBMITTIME, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getPatchReleaseTime(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETPATCHRELEASETIME, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addReleaseTime(Utf8String ipfsHash, Utf8String releaseTime) {
        final Function function = new Function(
                FUNC_ADDRELEASETIME, 
                Arrays.<Type>asList(ipfsHash, releaseTime), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> getPatchUsername(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETPATCHUSERNAME, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addPatchTotalScore(Utf8String ipfsHash, Uint64 addScore) {
        final Function function = new Function(
                FUNC_ADDPATCHTOTALSCORE, 
                Arrays.<Type>asList(ipfsHash, addScore), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<Utf8String, Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64>> getBasicInformation(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETBASICINFORMATION, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        return new RemoteCall<Tuple7<Utf8String, Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64>>(
                new Callable<Tuple7<Utf8String, Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64>>() {
                    @Override
                    public Tuple7<Utf8String, Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Utf8String, Utf8String, Utf8String, Utf8String, Utf8String, Uint64, Uint64>(
                                (Utf8String) results.get(0), 
                                (Utf8String) results.get(1), 
                                (Utf8String) results.get(2), 
                                (Utf8String) results.get(3), 
                                (Utf8String) results.get(4), 
                                (Uint64) results.get(5), 
                                (Uint64) results.get(6));
                    }
                });
    }

    public RemoteCall<Bool> patchExisted(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_PATCHEXISTED, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addPatch(Utf8String ipfsHash, Utf8String name, Utf8String username, Utf8String submitTime, Utf8String vulnerabilityIpfsHash) {
        final Function function = new Function(
                FUNC_ADDPATCH, 
                Arrays.<Type>asList(ipfsHash, name, username, submitTime, vulnerabilityIpfsHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> patchPassed(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_PATCHPASSED, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint64> getPatchStar(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETPATCHSTAR, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> getPatchName(Utf8String ipfsHash) {
        final Function function = new Function(FUNC_GETPATCHNAME, 
                Arrays.<Type>asList(ipfsHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static PatchStorage load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PatchStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PatchStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PatchStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PatchStorage load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PatchStorage(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PatchStorage load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PatchStorage(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PatchStorage> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PatchStorage.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PatchStorage> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PatchStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<PatchStorage> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PatchStorage.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PatchStorage> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PatchStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}

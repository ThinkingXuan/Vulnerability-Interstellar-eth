package com.wangert.vhw.contracts.geth;

import com.wangert.vhw.entities.Web3j.VulnerabilityStorage;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint64;

/**
 * 漏洞数据存储合约
 * 基于飞洛区块链的合约方法封装
 *
 * @Author：Wangert
 */

public class VulnerabilityStorageContract {

    //合约数据
    private static VulnerabilityStorage vulnerabilityStorage;
    private static VulnerabilityStorageContract vulnerabilityStorageContract;

//    //构造函数，初始化
//    public VulnerabilityStorageContract() {
//        vulnerabilityStorage = GethContract.getInstance().getVulnerabilityStorage();
//    }

    public static VulnerabilityStorageContract getInstance() {
        if (vulnerabilityStorageContract == null) {
            synchronized (VulnerabilityStorageContract.class) {
                if (vulnerabilityStorageContract == null) {
                    vulnerabilityStorageContract = new VulnerabilityStorageContract();
                    vulnerabilityStorage = GethContract.getInstance().getVulnerabilityStorage();
                }
            }
        }
        return vulnerabilityStorageContract;
    }


//    //判断漏洞是否存在
//    public boolean vulnerabilityExisted(String ipfsHash) {
//
//        boolean result;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "vulnerabilityExisted(string)", funcParams);
//
//        result = Boolean.valueOf(objects.get(0).toString());
//
//        return result;
//
//    }
//
//    //更新漏洞修复数据
//    public boolean updateDoneInformation(String ipfsHash, String doneTime) {
//
//        boolean result;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//        funcParams.addParams(doneTime);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "updateDoneInformation(string,string)", funcParams);
//
//        result = Boolean.valueOf(objects.get(0).toString());
//
//        return result;
//
//    }

    //star加一
    public boolean incStar(String ipfsHash) {

        //设置合约方法参数
        Utf8String utf8String = new Utf8String(ipfsHash);
        String result = null;
        try {
            result = vulnerabilityStorage.incStar(utf8String).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.equals("0x1");

    }

    //    //增加漏洞总评分
    public boolean addVulnerabilityTotalScore(String ipfsHash, int addScore) {

        String result = "";

        //设置合约方法参数
        Utf8String utf8String1 = new Utf8String(ipfsHash);
        Uint64 uint64 = new Uint64(addScore);

        try {
            result = vulnerabilityStorage.addVulnerabilityTotalScore(utf8String1, uint64).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.equals("0x1");

    }

    //
    //增加漏洞
    public boolean addVulnerability(String ipfsHash, String name, String username, String releaseTime) {

        String result = "";

        //设置合约方法参数
        Utf8String utf8String1 = new Utf8String(ipfsHash);
        Utf8String utf8String2 = new Utf8String(name);
        Utf8String utf8String3 = new Utf8String(username);
        Utf8String utf8String4 = new Utf8String(releaseTime);

        try {
            result = vulnerabilityStorage.addVulnerability(utf8String1, utf8String2, utf8String3, utf8String4).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.equals("0x1");

    }

    //增加补丁
    public boolean addPatch(String ipfsHash, String patchIpfsHash) {

        //设置合约方法参数
        Utf8String utf8String = new Utf8String(ipfsHash);
        Utf8String utf8String2 = new Utf8String(patchIpfsHash);
        String result = null;
        try {
            result = vulnerabilityStorage.addPatch(utf8String, utf8String2).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.equals("0x1");
    }

//    //获取漏洞基本信息
//    public Sextet<String, String, String, String, Integer, Integer> getBasicInformation(String ipfsHash) {
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getBasicInformation(string)", funcParams);
//
//        //获取漏洞名称、漏洞发布者、漏洞发布时间、漏洞修复时间、star数量、总评分
//        Sextet<String, String, String, String, Integer, Integer> sextet = new Sextet<>(
//                //漏洞名称
//                objects.get(0).toString(),
//                //漏洞发布者
//                objects.get(1).toString(),
//                //漏洞发布时间
//                objects.get(2).toString(),
//                //漏洞修复时间
//                objects.get(3).toString(),
//                //star数量
//                Integer.valueOf(objects.get(4).toString()),
//                //漏洞总评分
//                Integer.valueOf(objects.get(5).toString()));
//
//        return sextet;
//
//    }

//    //获取对应补丁数量
//    public int getNumberOfPatch(String ipfsHash) {
//
//        int pCount;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getNumberOfPatch(string)", funcParams);
//
//        pCount = Integer.parseInt(objects.get(0).toString());
//
//        return pCount;
//
//    }

    //获取补丁ipfs哈希
    public String getPatchIpfsHashByIndex(String ipfsHash, int index) {

        //设置合约方法参数
        Utf8String utf8String = new Utf8String(ipfsHash);
        Uint64 uint64 = new Uint64(index);
        Utf8String result = null;
        try {
            result = vulnerabilityStorage.getPatchIpfsHashByIndex(utf8String, uint64).send();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.getValue();
    }

//    //获取漏洞名称
//    public String getVulnerabilityName(String ipfsHash) {
//
//        String name;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVulnerabilityName(string)", funcParams);
//
//        name = objects.get(0).toString();
//
//        return name;
//    }
//
//    //获取漏洞发布者
//    public String getVulnerabilityUsername(String ipfsHash) {
//
//        String username;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVulnerabilityUsername(string)", funcParams);
//
//        username = objects.get(0).toString();
//
//        return username;
//    }
//
//    //获取漏洞发布时间
//    public String getVulnerabilityReleaseTime(String ipfsHash) {
//
//        String releaseTime;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVulnerabilityReleaseTime(string)", funcParams);
//
//        releaseTime = objects.get(0).toString();
//
//        return releaseTime;
//    }
//
//    //获取漏洞修复时间
//    public String getVulnerabilityDoneTime(String ipfsHash) {
//
//        String doneTime;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVulnerabilityDoneTime(string)", funcParams);
//
//        doneTime = objects.get(0).toString();
//
//        return doneTime;
//    }
//
//    //获取漏洞star数
//    public int getVulnerabilityStar(String ipfsHash) {
//
//        int starCount;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVulnerabilityStar(string)", funcParams);
//
//        starCount = Integer.parseInt(objects.get(0).toString());
//
//        return starCount;
//
//    }
//
//    //获取漏洞总评分
//    public int getVulnerabilityTotalScore(String ipfsHash) {
//
//        int totalScore;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(ipfsHash);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVulnerabilityTotalScore(string)", funcParams);
//
//        totalScore = Integer.parseInt(objects.get(0).toString());
//
//        return totalScore;
//
//    }

    /*

    public static void main(String[] args) {

        VulnerabilityStorageContract vulnerabilityStorageContract = new VulnerabilityStorageContract();

        //boolean b = vulnerabilityStorageContract.addVulnerability("test", "test", "wangjitao", "2019test");

        //boolean b = vulnerabilityStorageContract.addVulnerabilityTotalScore("test", 20);
        //boolean b2 = vulnerabilityStorageContract.addPatch("test", "test");

        //System.out.println("b:" + b + "/t/t b2:" + b2);

        Sextet<String, String, String, String, Integer, Integer> sextet = vulnerabilityStorageContract.getBasicInformation("test");

        System.out.println("name:" + sextet.getValue0());
        System.out.println("username:" + sextet.getValue1());
        System.out.println("releaseTime:" + sextet.getValue2());
        System.out.println("doneTime:" + sextet.getValue3());
        System.out.println("starCount:" + sextet.getValue4().intValue());
        System.out.println("totalScore:" + sextet.getValue5().intValue());

        if (vulnerabilityStorageContract.getNumberOfPatch("test") != 0) {

            String patchIpfsHash = vulnerabilityStorageContract.getPatchIpfsHashByIndex("test", 0);

            System.out.println("patchIpfsHash:" + patchIpfsHash);
        }
    }
*/


}

package com.wangert.vhw.contracts.geth;

import com.wangert.vhw.entities.Web3j.UserStorage;

import org.javatuples.Pair;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;

import org.web3j.tuples.generated.Tuple2;


/**
 * 用户数据存储合约
 * 基于以太坊区块链的合约方法封装
 *
 * @Author：youxuan
 */

public class UserStorageContract {

    private static UserStorageContract userStorageContract;
    private static UserStorage userStorage;

//    //构造函数，初始化
//    public UserStorageContract() {
//        userStorage = GethContract.getInstance().getUserStorage();
//    }

    public static UserStorageContract getInstance() {
        if (userStorageContract == null) {
            synchronized (UserStorageContract.class) {
                if (userStorageContract == null) {
                    userStorageContract = new UserStorageContract();
                    userStorage = GethContract.getInstance().getUserStorage();
                }
            }
        }
        return userStorageContract;
    }


    //判断用户是否存在
    public boolean userExisted(String username) {

        Utf8String utf8String = new Utf8String(username);
        Bool result = null;
        try {
            result = userStorage.userExisted(utf8String).send();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.getValue();
    }

    //用户登录验证
    public boolean verifyUser(String username, String vhwAddress, String encryptedPassword) {

        Bool result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Utf8String utf8VhwAddress = new Utf8String(vhwAddress);
        Utf8String utf8EncryptedPassword = new Utf8String(encryptedPassword);

        // 调用合约
        try {
            result = userStorage.verifyUser(utf8Username, utf8VhwAddress, utf8EncryptedPassword).send();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.getValue();
    }

    //新增用户
    public boolean addUser(String username, String vhwAddress, String encryptedPassword) {

        String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Utf8String utf8VhwAddress = new Utf8String(vhwAddress);
        Utf8String utf8EncryptedPassword = new Utf8String(encryptedPassword);

        // 调用合约
        try {
            result = userStorage.addUser(utf8Username, utf8VhwAddress, utf8EncryptedPassword).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert result != null;
        return result.equals("0x1");

    }

    //用户增加发布的漏洞
    public boolean addReleaseVulnerability(String username, String vulnerabilityIpfsHash) {

        String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Utf8String utf8VulnerabilityIpfsHash = new Utf8String(vulnerabilityIpfsHash);

        // 调用合约
        try {
            result = userStorage.addReleaseVulnerability(utf8Username, utf8VulnerabilityIpfsHash).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace(

            );
        }

        assert result != null;
        return result.equals("0x1");
    }

    //用户增加发布的补丁
    public boolean addReleasePatch(String username, String patchIpfsHash) {

        String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Utf8String utf8PatchIpfsHash = new Utf8String(patchIpfsHash);

        // 调用合约
        try {
            result = userStorage.addReleasePatch(utf8Username, utf8PatchIpfsHash).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert result != null;
        return result.equals("0x1");
    }

    //增加用户漏洞评分情况
    public boolean addAssessVulnerabilitiesScore(String username, String ipfsHash, int score) {
        String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Utf8String utf8ipfsHash = new Utf8String(ipfsHash);
        Uint8 uint8 = new Uint8(score);

        // 调用合约
        try {
            result = userStorage.addAssessVulnerabilitiesScore(utf8Username, utf8ipfsHash, uint8).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.equals("0x1");
    }

    //增加用户补丁评分情况
    public boolean addAssessPatchScore(String username, String ipfsHash, int score) {

        String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Utf8String utf8ipfsHash = new Utf8String(ipfsHash);
        Uint8 uint8 = new Uint8(score);

        // 调用合约
        try {
            result = userStorage.addAssessPatchScore(utf8Username, utf8ipfsHash, uint8).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.equals("0x1");

    }

    //增加用户总贡献值
    public boolean addTotalAndResidualContribution(String username, int contribution) {

        String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Uint64 uint8 = new Uint64(contribution);

        // 调用合约
        try {
            result = userStorage.addTotalAndResidualContribution(utf8Username, uint8).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.equals("0x1");
    }

    //消耗剩余贡献值
    public boolean useResidualContribution(String username, int useContribution) {
        String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Uint64 uint8 = new Uint64(useContribution);

        // 调用合约
        try {
            result = userStorage.useResidualContribution(utf8Username, uint8).send().getStatus();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.equals("0x1");

    }

    //获取用户贡献值情况
    public Pair<Integer, Integer> getContributionStatusWithUser(String username) {

        Tuple2<Uint64, Uint64> result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);

        // 调用合约
        try {
            result = userStorage.getContributionStatusWithUser(utf8Username).send();
        } catch (Exception e) {
            e.printStackTrace();
        }

        //获取用户总贡献值和用户剩余贡献值

        assert result != null;
        return new Pair<>(result.getValue1().getValue().intValue(), result.getValue2().getValue().intValue());

    }

    //获取发布漏洞数
    public int getNumberOfReleasedVulnerability(String username) {
        Uint64 result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);

        // 调用合约
        try {
            result = userStorage.getNumberOfReleasedVulnerability(utf8Username).send();
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert result != null;
        return result.getValue().intValue();

    }

    //获取发布补丁数
    public int getNumberOfReleasedPatch(String username) {
        //发布漏洞数
        Uint64 result = null;

        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);

        // 调用合约
        try {
            result = userStorage.getNumberOfReleasedPatch(utf8Username).send();
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert result != null;
        return result.getValue().intValue();
    }

    //根据索引获取发布漏洞的ipfs哈希
    public String getVulnerabilityIpfsHashByIndex(String username, int index) {

        //漏洞程序对应的ipfs哈希
        Utf8String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Uint64 uint8 = new Uint64(index);

        // 调用合约
        try {
            result = userStorage.getVulnerabilityIpfsHashByIndex(utf8Username, uint8).send();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.getValue();
    }

    //根据索引获取发布补丁的ipfs哈希
    public String getPatchIpfsHashByIndex(String username, int index) {

        //漏洞程序对应的ipfs哈希
        Utf8String result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Uint64 uint8 = new Uint64(index);

        // 调用合约
        try {
            result = userStorage.getPatchIpfsHashByIndex(utf8Username, uint8).send();
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert result != null;
        return result.getValue();

    }

    //根据用户获取对应的漏洞评分
    public int getVulnerabilityAssessScoreByUser(String username, String assessor) {

        //漏洞评分
        Uint8 result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Utf8String uint8assessor = new Utf8String(assessor);

        // 调用合约
        try {
            result = userStorage.getVulnerabilityAssessScoreByUser(utf8Username, uint8assessor).send();
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert result != null;
        return result.getValue().intValue();
    }

    //根据用户获取对应的补丁评分
    public int getPatchAssessScoreByUser(String username, String assessor) {

        //漏洞评分

        Uint8 result = null;
        //设置合约方法参数
        Utf8String utf8Username = new Utf8String(username);
        Utf8String uint8assessor = new Utf8String(assessor);

        // 调用合约
        try {
            result = userStorage.getPatchAssessScoreByUser(utf8Username, uint8assessor).send();
        } catch (Exception e) {
            e.printStackTrace();
        }

        assert result != null;
        return result.getValue().intValue();

    }

    //根据用户名获取对应的VHW地址
    public String getVhwAddressByUsername(String username) {

//        //vhw地址
//        String vhwAddress;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(username);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getVhwAddressByUsername(string)", funcParams);
//
//        vhwAddress = objects.get(0).toString();
//
//        return vhwAddress;

        return "";
    }

    //根据用户名获取对应的密码加密后密文
    public String getEncryptedPasswordByUsername(String username) {

//        //密码密文
//        String encryptedPassword;
//
//        //设置合约方法参数
//        FuncParams funcParams = new FuncParams();
//        funcParams.addParams(username);
//
//        List<?> objects = filoeanContract.filoean.invokeContract(filoeanContract.accountPrivateJson, "getEncryptedPasswordByUsername(string)", funcParams);
//
//        encryptedPassword = objects.get(0).toString();
//
//        return encryptedPassword;
        return "";
    }
}

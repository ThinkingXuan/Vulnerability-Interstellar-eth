package com.wangert.vhw.contracts.geth;

import com.wangert.vhw.blockchain.GethProperty;
import com.wangert.vhw.entities.Web3j.PatchStorage;
import com.wangert.vhw.entities.Web3j.UserStorage;
import com.wangert.vhw.entities.Web3j.VulnerabilityStorage;
import org.web3j.crypto.CipherException;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.response.EthGetBalance;
import org.web3j.protocol.http.HttpService;
import org.web3j.utils.Convert;

import java.io.IOException;
import java.math.BigInteger;

/**
 * 以太坊智能合约
 * author: youxuan
 * date: 2021年3月17日
 */
public class GethContract {

    private static GethContract gethUtil;

    public static GethContract getInstance() {
        if (gethUtil == null) {
            synchronized (GethContract.class) {
                if (gethUtil == null) {
                    gethUtil = new GethContract();
                }
            }
        }
        return gethUtil;
    }

    private Web3jClient getWeb3jClient() {
        GethProperty gethProperty = new GethProperty();
        Web3jClient web3jClient = new Web3jClient();


        web3jClient.setUserStorageAddress(gethProperty.getUserStorageContractAddress());
        web3jClient.setPatchStorageAddress(gethProperty.getPatchStorageContractAddress());
        web3jClient.setVulnerabilityStorageAddress(gethProperty.getVulnerabilityStorageContractAddress());

        try {
            web3jClient.setWeb3j(Web3j.build(new HttpService(gethProperty.getRPCAddress())));
            web3jClient.setCredentials(WalletUtils.loadCredentials("", gethProperty.getKeyStore()));
        } catch (IOException | CipherException e) {
            e.printStackTrace();
        }
        return web3jClient;
    }


    // 获取UserStorage智能合约
    public UserStorage getUserStorage() {
        UserStorage userStorage;
        Web3jClient web3jClient = getWeb3jClient();
        userStorage = UserStorage.load(
                web3jClient.getUserStorageAddress(),
                web3jClient.getWeb3j(),
                web3jClient.getCredentials(),
                BigInteger.valueOf(200000),
                BigInteger.valueOf(3000000));

        try {
            if (userStorage.isValid()) {
                System.out.println("------------------------------------UerStorage合约加载成功------------------------------------");
                return userStorage;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("------------------------------------UerStorage合约加载失败------------------------------------");
        return userStorage;
    }

    // 获取PatchStorage智能合约
    public PatchStorage getPatchStorage() {
        PatchStorage patchStorage;

        Web3jClient web3jClient = getWeb3jClient();
        patchStorage = PatchStorage.load(
                web3jClient.getPatchStorageAddress(),
                web3jClient.getWeb3j(),
                web3jClient.getCredentials(),
                BigInteger.valueOf(200000),
                BigInteger.valueOf(3000000));

        try {
            if (patchStorage.isValid()) {
                System.out.println("------------------------------------PatchStorage合约加载成功------------------------------------");
                return patchStorage;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("------------------------------------PatchStorage合约加载失败------------------------------------");
        return patchStorage;
    }


    // 获取VulnerabilityStorage智能合约
    public VulnerabilityStorage getVulnerabilityStorage() {
        VulnerabilityStorage vulnerabilityStorage;

        Web3jClient web3jClient = getWeb3jClient();
        vulnerabilityStorage = VulnerabilityStorage.load(
                web3jClient.getVulnerabilityStorageAddress(),
                web3jClient.getWeb3j(),
                web3jClient.getCredentials(),
                BigInteger.valueOf(200000),
                BigInteger.valueOf(3000000));

        try {
            if (vulnerabilityStorage.isValid()) {
                System.out.println("------------------------------------PatchStorage合约加载成功------------------------------------");
                return vulnerabilityStorage;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("------------------------------------PatchStorage合约加载失败------------------------------------");
        return vulnerabilityStorage;
    }


    public void testContract() {

        GethProperty gethProperty = new GethProperty();
        Web3j web3j = Web3j.build(new HttpService(gethProperty.getRPCAddress()));
        try {
            EthGetBalance ethGetBalance = web3j.ethGetBalance(gethProperty.getAccountAddress(), DefaultBlockParameterName.LATEST).send();
            if (ethGetBalance != null) {
                // 打印账户余额
                System.out.println(ethGetBalance.getBalance() + "wei");
                // 将单位转换为ether，方便查看
                System.out.println(Convert.fromWei(ethGetBalance.getBalance().toString(), Convert.Unit.ETHER) + "ether");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

}
